{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx","Pic1.png","Pic2.png","Pic3.png","Pic4.png","video_poster.png"],"names":["images","Pic1","Pic2","Pic3","Pic4","withStyles","container","width","position","videoContainer","postion","video","top","left","transform","image","height","css","styles","useState","currentPage","setCurrentPage","useCallback","MAX_PAGES","console","log","src","alt","poster","Poster","controls","playsInline","aria-label","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","Provider","value","stylesInterface","AphroditeInterface","stylesTheme","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"2QAUMA,EAAS,CAACC,IAAMC,IAAMC,IAAMC,KA2CnBC,4BAAW,iBAAO,CAC/BC,UAAW,CACTC,MAAO,OACPC,SAAU,YAEZC,eAAgB,CACdC,QAAS,YAEXC,MAAO,CACLH,SAAU,WACVD,MAAO,MACPK,IAAK,OACLC,KAAM,MACNC,UAAW,oBAIbC,MAAO,CACLR,MAAO,OACPS,OAAQ,WAnBGX,EAvCf,YAA8C,IAAhCY,EAA+B,EAA/BA,IAAKC,EAA0B,EAA1BA,OAA0B,EACLC,mBAAS,GADJ,mBACpCC,EADoC,KACvBC,EADuB,KAiB3C,OAfkBC,uBAAY,WACxBF,EAAcG,IAChBC,QAAQC,IAAI,aACZJ,EAAeD,EAAc,MAGjC,CAACA,EAAaC,IACMC,uBAAY,WAC1BF,EAAe,IACjBI,QAAQC,IAAI,aACZJ,EAAeD,EAAc,MAGjC,CAACA,EAAaC,IAGZ,wBAASJ,EAAIC,EAAOZ,WAClB,wBAASW,EAAIC,EAAOT,gBAClB,yCAASQ,EAAIC,EAAOH,OAApB,CAA4BW,IAAK1B,EAAO,GAAI2B,IAAI,MAChD,2CACMV,EAAIC,EAAOP,OADjB,CAEEiB,OAAQC,IACRC,UAAQ,EACRC,aAAW,EACXC,aAAW,UAEX,4BAAQN,IA9BA,yFA8BgBO,KAAK,gBAGjC,yCAAShB,EAAIC,EAAOH,OAApB,CAA4BW,IAAK1B,EAAO,GAAI2B,IAAI,MAChD,yCAASV,EAAIC,EAAOH,OAApB,CAA4BW,IAAK1B,EAAO,GAAI2B,IAAI,MAChD,yCAASV,EAAIC,EAAOH,OAApB,CAA4BW,IAAK1B,EAAO,GAAI2B,IAAI,UCnClCO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uDCNNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAkBC,SAAnB,CACEC,MAAO,CACLC,gBAAiBC,IACjBC,YAAa,KAGf,kBAAC,IAAD,KACE,kBAAC,EAAD,SAINC,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,a,mBEjJ5BC,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,0C","file":"static/js/main.c71b5cfd.chunk.js","sourcesContent":["import React, {useCallback, useState} from 'react';\nimport {withStyles, WithStylesProps} from 'react-with-styles';\n\nimport Pic1 from './Pic1.png';\nimport Pic2 from './Pic2.png';\nimport Pic3 from './Pic3.png';\nimport Pic4 from './Pic4.png';\nimport Poster from './video_poster.png';\n\n\nconst images = [Pic1, Pic2, Pic3, Pic4];\nconst MAX_PAGES = 4;\nconst VIDEO_URL = 'http://s3.jp-tok.cloud-object-storage.appdomain.cloud/miaomiaomiao/eastern_pacific.mp4';\n\nfunction App({css, styles}: WithStylesProps) {\n  const [currentPage, setCurrentPage] = useState(0);\n  const onNavNext = useCallback(() => {\n    if (currentPage < MAX_PAGES - 1) {\n      console.log('onNavNext');\n      setCurrentPage(currentPage + 1);\n    }\n  }\n, [currentPage, setCurrentPage]);\n    const onNavPrev = useCallback(() => {\n    if (currentPage  > 0) {\n      console.log('onNavPrev');\n      setCurrentPage(currentPage - 1);\n    }\n  }\n, [currentPage, setCurrentPage]);\n\n  return (\n    <div {...css(styles.container)}>\n      <div {...css(styles.videoContainer)}>\n        <img {...css(styles.image)} src={images[0]} alt=\"\" />\n        <video\n          {...css(styles.video)}\n          poster={Poster}\n          controls\n          playsInline\n          aria-label=\"Video\"\n        >\n          <source src={VIDEO_URL} type=\"video/mp4\" />\n        </video>\n      </div>\n      <img {...css(styles.image)} src={images[1]} alt=\"\" />\n      <img {...css(styles.image)} src={images[2]} alt=\"\" />\n      <img {...css(styles.image)} src={images[3]} alt=\"\" />\n      {/*<Waypoint bottomOffset={'10px'} onEnter={onNavNext}/>*/}\n    </div>\n  );\n}\n\nexport default withStyles(() => ({\n  container: {\n    width: '100%',\n    position: 'relative',\n  },\n  videoContainer: {\n    postion: 'relative',\n  },\n  video: {\n    position: 'absolute',\n    width: '40%',\n    top: '10vh',\n    left: '55%',\n    transform: 'translateX(-50%)',\n    // top: '50%',\n    // transform: 'translate(-50%, -50%)',\n  },\n  image: {\n    width: '100%',\n    height: '110%',\n  }\n}))(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// @ts-ignore\nimport React from 'react';\n// @ts-ignore\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport WithStylesContext from 'react-with-styles/lib/WithStylesContext';\n// @ts-ignore\nimport WithStylesDirectionAdapter from 'react-with-styles/lib/providers/WithStylesDirectionAdapter';\n// @ts-ignore\nimport AphroditeInterface from 'react-with-styles-interface-aphrodite';\nReactDOM.render(\n  <React.StrictMode>\n    <WithStylesContext.Provider\n      value={{\n        stylesInterface: AphroditeInterface,\n        stylesTheme: {},\n      }}\n    >\n      <WithStylesDirectionAdapter>\n        <App />\n      </WithStylesDirectionAdapter>\n    </WithStylesContext.Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Pic1.a8dff670.png\";","module.exports = __webpack_public_path__ + \"static/media/Pic2.bdc73b9e.png\";","module.exports = __webpack_public_path__ + \"static/media/Pic3.19b87882.png\";","module.exports = __webpack_public_path__ + \"static/media/Pic4.0e30ff72.png\";","module.exports = __webpack_public_path__ + \"static/media/video_poster.2a29d8b2.png\";"],"sourceRoot":""}